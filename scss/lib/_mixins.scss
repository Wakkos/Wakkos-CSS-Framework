




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/



// Mediqueries y breakpoints: El mixin consta de 4 partes
//
//  $breakpoint: Es el Brakpoint o la variable de breakpoint, las definimos en _variables.scss
//               las que vienen por defecto: $bp1, $bp2, $bp3, $bp4 y $bp5.
//  
//  $query1: max o min, dependiendo de como queremos el Mediaquery que funcione:
//           max-width, min-width, min-device-width, etc... - 'min' por defecto -
//
//  $query2: La segunda parte del query, lo que va después de 'min' o 'max'.
//           -device-width, -device-height, -width etc...  - 'width' por defecto -
//
//  $target: El medio. PUede ser 'all', 'screen', 'print', etc...
//           - '' por defecto -
//  USO:
//
//  **************************************************************************
//
//  $bp1 : 45em;
//
// .texto {
// 	color:red; 
// 	@include media-query-bp($bp1,max,device-width,screen) {
// 		color: blue;	
// 	}
// }
//
//  **************************************************************************
//
// Compilaría: 
//
//  **************************************************************************
// .texto {
// color: red; }
// @media screen and (max-device-width: 45em) {
//   .texto {
//     color: blue; } }
//  **************************************************************************
//
// Y en la hoja de estilos para navegadores que no soportan mediaqueries
// compilaría lo siguiente (componenter/no-mq.scss):
//
//  **************************************************************************
//
// .texto {
// color: red; }
// .ie8-sucks .texto {
//   color: blue; }
//
//  **************************************************************************
//
// La clase .ie8-sucks se puede cambiar en la configuración de variables.
//
//
@mixin media-query-bp($breakpoint, $query1: min, $query2: width, $target: "") {
	$mqtarget: "";
	// Check if media queries are supported
	@if $media-queries-supported == true {
		@if $target != "" {
			@media #{$target} and (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
		@else {
			@media (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
	}
	@else {
		#{$no-mq-classname} & {
			@content;
		}
	}
}


@mixin font-size($font-size: 16){
    font-size:($font-size)*1px;
    font-size:($font-size / $basefontsize)*1rem;
}

// flexbox, because fuck you, that's why.

@mixin displayflex {
	display : -webkit-box;
	display : -moz-box;
	display : -ms-flexbox;
	display : -webkit-flex;
	display : flex;
}

@mixin align-items($align) {
	-webkit-align-items : $align;
	-moz-align-items : $align;
	-o-align-items : $align;
	align-items : $align;
}

@mixin flex($flex, $width) {
	-webkit-box-flex : $flex;
	-moz-box-flex : $flex;
	width : $width;
	-webkit-flex : $flex;
	-ms-flex : $flex;
	flex : $flex;
}

@mixin order($order) {
	-webkit-box-ordinal-group : $order;
	-moz-box-ordinal-group : $order;
	-ms-flex-order : $order;
	-webkit-order : $order;
	order : $order;
}

// $include flex-start(VALUE) (flex-start | flex-end | center | space-between | space-around)
@mixin content-justify($justify) {
	-webkit-content-justify : $justify;
	-moz-content-justify : $justify;
	-o-content-justify : $justify;
	content-justify : $justify;
}

// $include flex-direction(VALUE) (row | row-reverse | column | column-reverse)
@mixin flex-direction($direction) {
	-webkit-flex-direction : $direction;
	-moz-flex-direction : $direction;
	-o-flex-direction : $direction;
	flex-direction : $direction;
}



// gradients
@mixin horizontal($startColor : $white, $endColor : $lightergrey) {
	background-color: $endColor;
	background-image  : -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image  : -webkit-linear-gradient(left, $startColor, $endColor);                   // Safari 5.1+, Chrome 10+
	background-image  : -moz-linear-gradient(left, $startColor, $endColor);                      // FF 3.6+
	background-image  : -ms-linear-gradient(left, $startColor, $endColor);                       // IE10
	background-image  : -o-linear-gradient(left, $startColor, $endColor);                        // Opera 11.10
	background-image  : linear-gradient(left, $startColor, $endColor);                           // W3C
	background-repeat : repeat-x;
}

@mixin vertical($startColor : $white, $endColor:  $lightergrey) {
	background-image  : -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image  : -webkit-linear-gradient(top, $startColor, $endColor);                    // Safari 5.1+, Chrome 10+
	background-color  : $endColor;
	background-image  : -moz-linear-gradient(top, $startColor, $endColor);                       // FF 3.6+
	background-image  : -ms-linear-gradient(top, $startColor, $endColor);                        // IE10
	background-image  : -o-linear-gradient(top, $startColor, $endColor);                         // Opera 11.10
	background-image  : linear-gradient(top, $startColor, $endColor);                            // W3C
	background-repeat : repeat-x;
}

@mixin directional($startColor : $white, $endColor : $lightergrey, $deg : 45deg) {
	background-color  : $endColor;
	background-image  : -moz-linear-gradient($deg, $startColor, $endColor);                     // FF 3.6+
	background-image  : -ms-linear-gradient($deg, $startColor, $endColor);                      // IE10
	background-image  : -webkit-linear-gradient($deg, $startColor, $endColor);                  // Safari 5.1+, Chrome 10+
	background-image  : -o-linear-gradient($deg, $startColor, $endColor);                       // Opera 11.10
	background-image  : linear-gradient($deg, $startColor, $endColor);                          // W3C
	background-repeat : repeat-x;
}

// .bordered(COLOR, COLOR, COLOR, COLOR);
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
	border-top : solid 1px $top-color;
	border-left : solid 1px $left-color;
	border-right : solid 1px $right-color;
	border-bottom : solid 1px $bottom-color;
}

// .border-radius(VALUE,VALUE,VALUE,VALUE);
@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
	-webkit-border-top-right-radius : $topright;
	-webkit-border-bottom-right-radius : $bottomright;
	-webkit-border-bottom-left-radius : $bottomleft;
	-webkit-border-top-left-radius : $topleft;
	-moz-border-radius-topright : $topright;
	-moz-border-radius-bottomright : $bottomright;
	-moz-border-radius-bottomleft : $bottomleft;
	-moz-border-radius-topleft : $topleft;
	border-top-right-radius : $topright;
	border-bottom-right-radius : $bottomright;
	border-bottom-left-radius : $bottomleft;
	border-top-left-radius : $topleft;
	-webkit-background-clip : padding-box;
	-moz-background-clip : padding;
	background-clip : padding-box;
}

// .box-shadow(HORIZONTAL VERTICAL BLUR COLOR))
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
	-webkit-box-shadow : $shadow;
	box-shadow : $shadow;
}

// .drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
	-webkit-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	-moz-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}

// .opacity(VALUE);
@mixin opacity($opacity : .5) {
	-webkit-opacity : $opacity;
	-moz-opacity : $opacity;
	opacity : $opacity;
}

// .rotate(VALUEdeg);
@mixin rotate($deg) {
	-webkit-transform : rotate($deg);
	-moz-transform : rotate($deg);
	-ms-transform : rotate($deg);
	-o-transform : rotate($deg);
	transform : rotate($deg);
}

// .scale(VALUE);
@mixin scale($ratio) {
	-webkit-transform : scale($ratio);
	-moz-transform : scale($ratio);
	-ms-transform : scale($ratio);
	-o-transform : scale($ratio);
	transform : scale($ratio);
}

// .skew(VALUE, VALUE);
@mixin skew($x: 0, $y: 0) {
	-webkit-transform : skew($x, $y);
	-moz-transform : skew($x, $y);
	-ms-transform : skew($x, $y);
	-o-transform : skew($x, $y);
	transform : skew($x, $y);
}

// .transition(PROPERTY DURATION DELAY(OPTIONAL) TIMING-FINCTION);
@mixin transition($transition) {
	-webkit-transition : $transition;
	-moz-transition : $transition;
	-ms-transition : $transition;
	-o-transition : $transition;
	transition : $transition;
}

// .translate(VALUE, VALUE)
@mixin translate($x: 0, $y: 0) {
	-webkit-transform : translate($x, $y);
	-moz-transform : translate($x, $y);
	-ms-transform : translate($x, $y);
	-o-transform : translate($x, $y);
	transform : translate($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
	-webkit-transform : translate($x, $y, $z);
	-moz-transform : translate($x, $y, $z);
	-ms-transform : translate($x, $y, $z);
	-o-transform : translate($x, $y, $z);
	transform : translate($x, $y, $z);
}


// .background-alpha(VALUE VALUE);
@mixin background-alpha($color: $white, $alpha: 1) {
	background-color : hsla(hue($color), saturation($color), lightness($color), $alpha);
}

// .background-size(VALUE VALUE);
@mixin background-size($size){
	-webkit-background-size : $size;
	-moz-background-size : $size;
	-o-background-size : $size;
	background-size : $size;
}

// .background-clip(VALUE); (border-box, padding-box, content-box)
@mixin background-clip($clip) {
	-webkit-background-clip : $clip;
	-moz-background-clip : $clip;
	background-clip : $clip;
}

// .box-sizing(VALUE); (border-box, padding-box, content-box)
@mixin box-sizing($boxsize: border-box) {
	-webkit-box-sizing : $boxsize;
	-moz-box-sizing : $boxsize;
	-ms-box-sizing : $boxsize;
	box-sizing : $boxsize;
}


// .resize(VALUE) (none, both, horizontal, vertical, inherit)

@mixin resize($direction: both) {
	resize : $direction;
	overflow : auto;
}

// .userselect(VALUE) (all, element, none, text)

@mixin user-select($select) {
	-webkit-user-select : $select;
	-moz-user-select : $select;
	-o-user-select : $select;
	user-select : $select;
}





// .columns(250px, 0, 24px, COLOR, solid, 1px)

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
	-webkit-column-width : $colwidth;
	-webkit-column-count : $colcount;
	-webkit-column-gap : $colgap;
	-webkit-column-rule-color : $columnRuleColor;
	-webkit-column-rule-style : $columnRuleStyle;
	-webkit-column-rule-width : $columnRuleWidth;
	-moz-column-width : $colwidth;
	-moz-column-count : $colcount;
	-moz-column-gap : $colgap;
	-moz-column-rule-color : $columnRuleColor;
	-moz-column-rule-style : $columnRuleStyle;
	-moz-column-rule-width : $columnRuleWidth;
	column-width : $colwidth;
	column-count : $colcount;
	column-gap : $colgap;
	column-rule-color : $columnRuleColor;
	column-rule-style : $columnRuleStyle;
	column-rule-width : $columnRuleWidth;
}





//
//Creamos prefijos para todo dios
//
//   `@include vendor(border-radius, 4px);`
//
//
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

