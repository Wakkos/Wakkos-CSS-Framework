




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/



// Mediqueries y breakpoints: El mixin consta de 4 partes
//
//  $breakpoint: Es el Brakpoint o la variable de breakpoint, las definimos en _variables.scss
//               las que vienen por defecto: $bp1, $bp2, $bp3, $bp4 y $bp5.
//
//  $query1: max o min, dependiendo de como queremos el Mediaquery que funcione:
//           max-width, min-width, min-device-width, etc... - 'min' por defecto -
//
//  $query2: La segunda parte del query, lo que va después de 'min' o 'max'.
//           -device-width, -device-height, -width etc...  - 'width' por defecto -
//
//  $target: El medio. PUede ser 'all', 'screen', 'print', etc...
//           - '' por defecto -
//  USO:
//
//  **************************************************************************
//
//  $bp1 : 45em;
//
// .texto {
// 	color:red;
// 	@include media-query-bp($bp1,max,device-width,screen) {
// 		color: blue;
// 	}
// }
//
//  **************************************************************************
//
// Compilaría:
//
//  **************************************************************************
// .texto {
// color: red; }
// @media screen and (max-device-width: 45em) {
//   .texto {
//     color: blue; } }
//  **************************************************************************
//
// Y en la hoja de estilos para navegadores que no soportan mediaqueries
// compilaría lo siguiente (componenter/no-mq.scss):
//
//  **************************************************************************
//
// .texto {
// color: red; }
// .ie8-sucks .texto {
//   color: blue; }
//
//  **************************************************************************
//
// La clase .ie8-sucks se puede cambiar en la configuración de variables.
//
//
@mixin media-query-bp($breakpoint, $query1: min, $query2: width, $target: "") {

	// Check if media queries are supported
	@if $media-queries-supported == true {
		@if $target != "" {
			@media #{$target} and (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
		@else {
			@media (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
	}
	@else {
		#{$no-mq-classname} & {
			@content;
		}
	}
}


@mixin font-size($font-size: 16){
    font-size:($font-size)*1px;
    font-size:($font-size / $basefontsize)*1rem;
}

  /**
  * Centrar y dar un ancho máximo igual a $pagemaxwidth.
  */
@mixin max-width($max-width : $pagemaxwidth)  {
	margin-left:auto;
	margin-right:auto;
	max-width: $max-width;
	width:100%;
}


// gradients
@mixin horizontal($startColor : $white, $endColor : $lightergrey) {
	background-color: $endColor;
	background-image  : -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image  : -webkit-linear-gradient(left, $startColor, $endColor);                   // Safari 5.1+, Chrome 10+
	background-image  : -moz-linear-gradient(left, $startColor, $endColor);                      // FF 3.6+
	background-image  : -ms-linear-gradient(left, $startColor, $endColor);                       // IE10
	background-image  : -o-linear-gradient(left, $startColor, $endColor);                        // Opera 11.10
	background-image  : linear-gradient(left, $startColor, $endColor);                           // W3C
	background-repeat : repeat-x;
}

@mixin vertical($startColor : $white, $endColor:  $lightergrey) {
	background-image  : -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image  : -webkit-linear-gradient(top, $startColor, $endColor);                    // Safari 5.1+, Chrome 10+
	background-color  : $endColor;
	background-image  : -moz-linear-gradient(top, $startColor, $endColor);                       // FF 3.6+
	background-image  : -ms-linear-gradient(top, $startColor, $endColor);                        // IE10
	background-image  : -o-linear-gradient(top, $startColor, $endColor);                         // Opera 11.10
	background-image  : linear-gradient(top, $startColor, $endColor);                            // W3C
	background-repeat : repeat-x;
}

@mixin directional($startColor : $white, $endColor : $lightergrey, $deg : 45deg) {
	background-color  : $endColor;
	background-image  : -moz-linear-gradient($deg, $startColor, $endColor);                     // FF 3.6+
	background-image  : -ms-linear-gradient($deg, $startColor, $endColor);                      // IE10
	background-image  : -webkit-linear-gradient($deg, $startColor, $endColor);                  // Safari 5.1+, Chrome 10+
	background-image  : -o-linear-gradient($deg, $startColor, $endColor);                       // Opera 11.10
	background-image  : linear-gradient($deg, $startColor, $endColor);                          // W3C
	background-repeat : repeat-x;
}

// .bordered(COLOR, COLOR, COLOR, COLOR);
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
	border-top : solid 1px $top-color;
	border-left : solid 1px $left-color;
	border-right : solid 1px $right-color;
	border-bottom : solid 1px $bottom-color;
}

// .border-radius(VALUE,VALUE,VALUE,VALUE);
@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
	@include vendor(border-radius, $topleft $topright $bottomright $bottomleft);
	@include background-clip(padding-box);
}

// .box-shadow(HORIZONTAL VERTICAL BLUR COLOR))
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
	@include vendor(box-shadow, $shadow);
}

// .drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
	@include vendor(box-shadow, $x-axis $y-axys $blur rgba(0, 0, 0, $alpha));
}

// .opacity(VALUE);
@mixin opacity($opacity : .5) {
	@include vendor(opacity, $opacity);
}

// .rotate(VALUEdeg);
@mixin rotate($deg) {
	@include vendor(transform, rotate($deg));
}

// .scale(VALUE);
@mixin scale($ratio) {
	@include vendor(transform, scale($ratio));
}

// .skew(VALUE, VALUE);
@mixin skew($x: 0, $y: 0) {
	@include vendor(transform, skew($x, $y));
}

// .transition(PROPERTY DURATION DELAY(OPTIONAL) TIMING-FINCTION);
@mixin transition($transition) {
	@include vendor(transition, $transition);
}

// .translate(VALUE, VALUE)
@mixin translate($x: 0, $y: 0) {
	@include vendor(transform, translate($x, $y));
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
	@include vendor(transform, translate3d($x, $y, $z));
}


// .background-alpha(VALUE VALUE);
@mixin background-alpha($color: $white, $alpha: 1) {
	background-color : hsla(hue($color), saturation($color), lightness($color), $alpha);
}

// .background-size(VALUE VALUE);
@mixin background-size($size){
	@include vendor(background-size, $size);
}

// .background-clip(VALUE); (border-box, padding-box, content-box)
@mixin background-clip($clip) {
	@include vendor(background-clip, $clip);
}

// .box-sizing(VALUE); (border-box, padding-box, content-box)
@mixin box-sizing($boxsize: border-box) {
	@include vendor(box-sizing, $boxsize);
}


// .resize(VALUE) (none, both, horizontal, vertical, inherit)
@mixin resize($direction: both) {
	resize : $direction;
	overflow : auto;
}

// .userselect(VALUE) (all, element, none, text)
@mixin user-select($select) {
	@include vendor(user-select, $select);
}


// .columns(250px, 0, 24px, COLOR, solid, 1px)
@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
	@include vendor(column-width, $colwidth);
	@include vendor(column-count, $colcount);
	@include vendor(column-gap, $colgap);
	@include vendor(column-rule-color, $columnRuleColor);
	@include vendor(column-rule-style, $columnRuleStyle);
	@include vendor(column-rule-width, $columnruleWidth);
}


//
//Creamos prefijos para todo dios
//
//   `@include vendor(border-radius, 4px);`
//
//
@mixin vendor($property, $value...){
    @each $vendor in $vendors {
      -#{$vendor}-#{$property}:$value;
    }
    #{$property}:$value;
}


/* 
 * Función para controlar el index 
 */
 
@function z($layer) {
  @if not map-has-key($z-layers, $layer) {
    @warn "No layer found for `#{$layer}` in $z-layers map. Property omitted.";
  }
 
  @return map-get($z-layers, $layer);
}
